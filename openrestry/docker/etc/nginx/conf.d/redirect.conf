server {
    listen 80;
    server_name _;
    server_name_in_redirect off;
    port_in_redirect off;
    access_log /var/log/nginx/%CONTAINER_NAME%_access.log;
    error_log /var/log/nginx/%CONTAINER_NAME%_error.log;

    location / {
        resolver 8.8.4.4 valid=30s;

        set $upstream '';
        access_by_lua '
            local key = ngx.var.http_host
            if not key then
                ngx.log(ngx.ERR, "no host found")
                return ngx.exit(ngx.HTTP_NOT_FOUND)
            end

            local redis = require "resty.redis"
            local r = redis:new()

            r:set_timeout(1000) -- 1 second

            local ok, err = r:connect("unix:/var/run/redis/redis.sock")
            if not ok then
                ngx.log(ngx.ERR, "failed to connect to redis: ", err)
                return ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
            end

            local host, err = r:get(key)
            if not host then
                ngx.log(ngx.ERR, "failed to get redis key: ", err)
                return ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
            end

            if host == ngx.null then
                ngx.log(ngx.ERR, "no host found for key ", key)
                return ngx.exit(ngx.HTTP_NOT_FOUND)
            end

            ngx.var.upstream = host
        ';

        set $do_not_cache 1;
        proxy_buffering             off;
        proxy_set_header            Host $host;
        proxy_set_header            X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header            X-Forwarded-Server  $host;
        proxy_redirect              off;
        proxy_connect_timeout       30;
        proxy_send_timeout          30;
        proxy_read_timeout          30;
        proxy_no_cache      $do_not_cache;
        proxy_cache_bypass  $do_not_cache;
        proxy_cache_key     $scheme://$host$request_uri$is_args$args;
        proxy_pass http://$upstream;
    }

}
